@using Librarr.Data
@using Librarr.Model
@using Librarr.Services
@using Librarr.Services.Metadata

@inject ILogger<AddBookDialog> Logger
@inject LibrarrDbContext      db
@inject GrabService GrabService

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1">
            <MudCheckBox @bind-Value="_search" Label="Search"/>
            <MudButton OnClick="() => OnAddBookClicked(true, false)">Add Ebook</MudButton>
            <MudButton OnClick="() => OnAddBookClicked(false, true)">Add Audiobook</MudButton>
            <MudButton OnClick="() => OnAddBookClicked(true, true)">Add both</MudButton>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Parameter] public BookSearchItem Book { get; set; }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private bool _search = true;

    private void Close() => MudDialog.Close(DialogResult.Ok(true));

    private Task ChangeTitleAsync() => MudDialog.SetTitleAsync($"Current time is: {DateTime.Now}");

    private Task ToggleCloseButtonAsync()
    {
        
        var options = MudDialog.Options with
        {
            CloseButton = !(MudDialog.Options.CloseButton ?? false)
        };

        return MudDialog.SetOptionsAsync(options);
    }

    private Task ToggleFullWidthAsync()
    {
        var options = MudDialog.Options with
        {
            FullWidth = !(MudDialog.Options.FullWidth ?? true)
        };

        return MudDialog.SetOptionsAsync(options);
    }

    private Task ToggleHeaderAsync()
    {
        var options = MudDialog.Options with
        {
            NoHeader = !(MudDialog.Options.NoHeader ?? false)
        };

        return MudDialog.SetOptionsAsync(options);
    }

    private async Task OnAddBookClicked(bool ebook, bool audiobook)
    {
        // if (await IsBookInDatabaseAsync(_book))
        // {
        //     Logger.LogInformation($"{book.title} is already in the database.");
        //     return;
        // }
        
        Logger.LogInformation($"Saving {Book.Title} to DB");

        BookEntryType entryType = BookEntryType.None;
        if (ebook && audiobook)
        {
            entryType = BookEntryType.Both;
        } else if (ebook)
        {
            entryType = BookEntryType.EBook;
        } else if (audiobook)
        {
            entryType = BookEntryType.Audiobook;
        }
        
        var be = await db.AddBook(Book, entryType);
        // _addedBooks.Add(book.key);
        
        if (_search)
        {
            await GrabService.SearchForBook(be);
        }

        MudDialog.Close(DialogResult.Ok(true));
    }
}