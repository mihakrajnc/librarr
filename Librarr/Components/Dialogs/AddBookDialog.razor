@using Librarr.Data
@using Librarr.Services
@using Librarr.Services.Metadata
@using Microsoft.EntityFrameworkCore

@inject ILogger<AddBookDialog> Logger
@inject GrabService            GrabService
@inject IServiceScopeFactory   ScopeFactory

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1">
            <MudCheckBox @bind-Value="_search" Label="Search"/>
            <MudButton OnClick="() => OnAddBookClicked(true, false)">Add Ebook</MudButton>
            <MudButton OnClick="() => OnAddBookClicked(false, true)">Add Audiobook</MudButton>
            <MudButton OnClick="() => OnAddBookClicked(true, true)">Add both</MudButton>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter, EditorRequired] public required BookSearchItem Book { get; set; }

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = null!;

    private bool _search = true;

    private void Close() => MudDialog.Close(DialogResult.Ok(true));

    private async Task OnAddBookClicked(bool ebook, bool audiobook)
    {
        using var scope = ScopeFactory.CreateScope();
        var db = scope.ServiceProvider.GetService<LibrarrDbContext>()!;

        if (await db.Books.AnyAsync(b => b.OLID == Book.ID))
        {
            Logger.LogInformation($"{Book.Title} is already in the database.");
            return;
        }

        Logger.LogInformation($"Saving {Book.Title} to DB");

        var be = await db.AddBook(Book, ebook, audiobook);

        if (_search)
        {
            await GrabService.SearchForBook(be);
        }

        MudDialog.Close(DialogResult.Ok(true));
    }

}