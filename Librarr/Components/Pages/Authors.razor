@page "/authors"
@using Librarr.Data
@using Librarr.Model
@using Microsoft.EntityFrameworkCore

@inject ILogger<Search>   Logger;
@inject LibrarrDbContext db

<MudText Typo="Typo.h3" GutterBottom="true">Authors</MudText>

<MudTable Items="@_authors" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading"
          LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>OLID</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>BookCount</MudTh>
        <MudTh>Details</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
        <MudTd DataLabel="OLID">@context.OLID</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="BookCount">@context.Books.Count</MudTd>
        <MudTd DataLabel="Details"><MudButton Href="@($"authors/{context.Id}")">Details</MudButton></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {

    private bool _loading;

    private List<Author> _authors = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            _authors = await db.Authors.Include(a => a.Books).ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Failed to load books: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

}