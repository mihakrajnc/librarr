@page "/books"
@using Librarr.Components.Dialogs
@using Librarr.Model
@using Librarr.Services

@inject GrabService     GrabService
@inject IDialogService  DialogService
@inject LibraryService  Library

<PageTitle>Books</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Books</MudText>

<MudTable Items="@_books" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>OLID</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Author</MudTh>
        <MudTh>Published</MudTh>
        <MudTh>Cover</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="OLID">@context.OLID</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Author">@context.Author.Name</MudTd>
        <MudTd DataLabel="Published">@context.FirstPublishYear</MudTd>
        <MudTd DataLabel="Cover">
            <MudImage Src="@context.CoverURL"
                      Width="100" Height="100"
                      Alt="Icon" Elevation="0"
                      Class="rounded-lg"/>
        </MudTd>
        <MudTd DataLabel="Status">
            @switch (GetLowestStatus(context))
            {
                case LibraryFile.DownloadStatus.Pending:
                    <MudChip T="string" Variant="Variant.Text" Color="Color.Warning">Pending</MudChip>
                    break;
                case LibraryFile.DownloadStatus.Downloading:
                    <MudChip T="string" Variant="Variant.Text" Color="Color.Info">Downloading</MudChip>
                    break;
                case LibraryFile.DownloadStatus.Downloaded:
                    <MudChip T="string" Variant="Variant.Text" Color="Color.Success">Downloaded</MudChip>
                    break;
                case LibraryFile.DownloadStatus.Imported:
                    <MudChip T="string" Variant="Variant.Text" Color="Color.Primary">Imported</MudChip>
                    break;
                case LibraryFile.DownloadStatus.Failed:
                    <MudChip T="string" Variant="Variant.Text" Color="Color.Error">Failed</MudChip>
                    break;
                default:
                    <MudChip T="string" Variant="Variant.Text" Color="Color.Default">Unknown</MudChip>
                    break;
            }
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search"
                    OnClick="() => SearchAutomatic(context)" Size="Size.Small"/>
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.PersonSearch"
                    OnClick="() => SearchManual(context, false)" Size="Size.Small"/>
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.BluetoothSearching"
                    OnClick="() => SearchManual(context, true)" Size="Size.Small"/>
            <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => RemoveBook(context)"
                    Size="Size.Small"/>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {

    private bool _loading;

    private List<Book> _books = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _books = await Library.GetBooks();
        _loading = false;
    }

    private static LibraryFile.DownloadStatus GetLowestStatus(Book book)
    {
        if (book.Files.Count == 0)
        {
            return LibraryFile.DownloadStatus.Pending;
        }

        var status = LibraryFile.DownloadStatus.Failed;

        foreach (var file in book.Files)
        {
            if (file.Status < status)
            {
                status = file.Status;
            }
        }

        return status;
    }

    private async Task SearchAutomatic(Book book)
    {
        await GrabService.SearchForBook(book);
    }

    private async Task SearchManual(Book book, bool audiobook)
    {
        await DialogService.ShowAsync<ManualSearchDialog>("Pick release", new DialogParameters<ManualSearchDialog>
        {
            { x => x.Book, book },
            { x => x.Audiobook, audiobook },
        });
    }

    private async Task RemoveBook(Book book)
    {
        var success = await Library.DeleteBook(book.Id);

        if (success)
        {
            _books.Remove(book);
        }
    }

}