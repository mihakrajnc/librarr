@page "/books"
@using Cheesarr.Data
@using Cheesarr.Model
@using Cheesarr.Services
@using Microsoft.EntityFrameworkCore


@inject ILogger<Search>   Logger;
@inject CheesarrDbContext db
@inject GrabService       GrabService

<PageTitle>Books</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Books</MudText>

<MudTable Items="@_books" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>OLID</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Author</MudTh>
        <MudTh>Published</MudTh>
        <MudTh>EB Hash</MudTh>
        <MudTh>Cover</MudTh>
        <MudTh>Find</MudTh>
        <MudTh>Remove</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="OLID">@context.ID</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Author">@context.Author?.Name</MudTd>
        <MudTd DataLabel="Published">@context.FirstPublishYear</MudTd>
        <MudTd DataLabel="EB Hash">@GetShortHash(context)</MudTd>
        <MudTd DataLabel="Cover">
            <MudImage Src="@context.CoverURL"
                      Width="100" Height="100"
                      Alt="Icon" Elevation="0"
                      Class="rounded-lg"/>
        </MudTd>
        <MudTd DataLabel="Find">
            <MudButton OnClick="() => GrabBook(context)" Color="Color.Primary">
                Grab
            </MudButton>
        </MudTd>
        <MudTd DataLabel="Remove">
            <MudButton OnClick="() => RemoveBook(context)" Color="Color.Primary">
                X
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {

    private bool _loading;

    private List<BookEntry> _books = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            _books = await db.Books.ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Failed to load books: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }
    
    private async Task GrabBook(BookEntry book)
    {
        await GrabService.SearchForBook(book);
    }

    private string GetShortHash(BookEntry book)
    {
        var hash = book.EBookTorrent?.Hash;
        if (hash == null) return string.Empty;
        
        return hash.Substring(0, 7) + "...";
    }

    private async Task RemoveBook(BookEntry book)
    {
        db.Books.Remove(book);
        _books.Remove(book);
        await db.SaveChangesAsync();
    }

}